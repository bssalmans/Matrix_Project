using BS_Matrix_Console;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace RationalTest
{
    
    
    /// <summary>
    ///This is a test class for RationalTest and is intended
    ///to contain all RationalTest Unit Tests
    ///</summary>
    [TestClass()]
    public class RationalTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Rational Constructor with single integer argument
        ///</summary>
        [TestMethod()]
        public void RationalConstructorTest_OneIntegerArg()
        {
            // setup
            int integer = 2;
            int expected_numerator = 2;
            int expected_denominator = 1;

            // act
            Rational target = new Rational(integer);

            // assert
            Assert.AreEqual(target.Numerator, expected_numerator);
            Assert.AreEqual(target.Denominator, expected_denominator);
        }

        /// <summary>
        ///A test for Rational Constructor with two integer args
        ///</summary>
        [TestMethod()]
        public void RationalConstructorTest_twoIntegerArgs()
        {
            // setup
            int numerator = 4;
            int denominator = 5;
            int expected_numerator = 4;
            int expected_denominator = 5;

            // act
            Rational target = new Rational(numerator, denominator);

            // assert
            Assert.AreEqual(target.Numerator, expected_numerator);
            Assert.AreEqual(target.Denominator, expected_denominator);
        }

        /// <summary>
        ///A test for Equals
        ///</summary>
        [TestMethod()]
        public void EqualsTest()
        {
            // setup
            int integer = 5;
            Rational target = new Rational(integer);
            object obj = null;
            bool expected = false;
            bool actual;

            // act
            actual = target.Equals(obj);

            // assert
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for GCD
        ///</summary>
        [TestMethod()]
        public void GCDTest()
        {
            // setup
            Rational target = new Rational(2, 4);
            int expected = 2;
            int actual;

            // act
            actual = target.GCD();

            // assert
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for Reduce
        ///</summary>
        [TestMethod()]
        public void ReduceTest()
        {
            // setup
            Rational target = new Rational(2, 4);
            Rational expected = new Rational(1, 2);

            // act
            target.Reduce();

            // assert
            Assert.AreEqual(target, expected);
        }

        /// <summary>
        ///A test for ToString
        ///</summary>
        [TestMethod()]
        public void ToStringTest()
        {
            // setup
            Rational target = new Rational(5,4);
            string expected = "5/4";
            string actual;

            // act
            actual = target.ToString();

            // assert
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for op_Addition
        ///</summary>
        [TestMethod()]
        public void op_AdditionTest()
        {
            // setup
            Rational lhs = new Rational(1, 2); 
            Rational rhs = new Rational(2, 4);
            Rational expected = new Rational(1, 1);
            Rational actual;

            //act
            actual = (lhs + rhs);

            // assert
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for op_Division
        ///</summary>
        [TestMethod()]
        public void op_DivisionTest()
        {
            // setup
            Rational lhs = new Rational(1, 2);
            Rational rhs = new Rational(1, 2);
            Rational expected = new Rational(1, 1);
            Rational actual;

            // act
            actual = (lhs / rhs);

            // assert
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for op_Equality
        ///</summary>
        [TestMethod()]
        public void op_EqualityTest()
        {
            // setup
            Rational lhs = new Rational(1, 2);
            Rational rhs = new Rational(1, 2);
            bool expected = true;
            bool actual;

            // act
            actual = (lhs == rhs);

            // assert
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for op_Explicit
        ///</summary>
        [TestMethod()]
        public void op_ExplicitTest()
        {
            // setup
            Rational myRational = new Rational(4, 2); 
            int expected = 2; 
            int actual;

            // act
            actual = ((int)(myRational));

            // assert
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for op_Implicit
        ///</summary>
        [TestMethod()]
        public void op_ImplicitTest()
        {
            // setup
            int myInteger = 1; 
            Rational expected = new Rational(1, 1);
            Rational actual;

            // act
            actual = myInteger;

            // assert
            Assert.AreEqual(actual.Numerator, expected.Numerator);
            Assert.AreEqual(actual.Denominator, expected.Denominator);
        }

        /// <summary>
        ///A test for op_Inequality
        ///</summary>
        [TestMethod()]
        public void op_InequalityTest()
        {
            // setup
            Rational lhs = new Rational(5, 4);
            Rational rhs = new Rational(1, 2);
            bool expected = true;
            bool actual;

            // act
            actual = (lhs != rhs);

            // assert
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for op_Multiply
        ///</summary>
        [TestMethod()]
        public void op_MultiplyTest()
        {
            // setup
            Rational lhs = new Rational(1, 2);
            Rational rhs = new Rational(2, 4);
            Rational expected = new Rational(1, 4);
            Rational actual;

            // act
            actual = (lhs * rhs);

            //assert
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for op_Subtraction
        ///</summary>
        [TestMethod()]
        public void op_SubtractionTest()
        {
            // setup
            Rational lhs = new Rational(1, 1);
            Rational rhs = new Rational(1, 2);
            Rational expected = new Rational(1, 2);
            Rational actual;

            // act
            actual = (lhs - rhs);

            // assert
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for Denominator
        ///</summary>
        [TestMethod()]
        public void DenominatorTest()
        {
            // setup
            int integer = 5; 
            Rational target = new Rational(integer);
            int expected = 1;
            int actual;

            // act
            actual = target.Denominator;

            // assert
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for Numerator
        ///</summary>
        [TestMethod()]
        public void NumeratorTest()
        {
            // setup
            int integer = 3; 
            Rational target = new Rational(integer);
            int expected = 3;
            int actual;

            // act
            actual = target.Numerator;

            // assert
            Assert.AreEqual(expected, actual);
        }
    }
}
